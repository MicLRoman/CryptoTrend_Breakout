from telebot import TeleBot, types
import threading
from time import sleep
from datetime import datetime

from user import User, db_controller

class Telegram_interface():

    def activate_tg(self, token):

        self.reply_blacklist = []

        self.users = {}                     #{user_id: User(class)}
        self.users_promocode = {}           #{code: user_id}
        self.origin_referral_code = 'ZEROCODE'
        self.main_button = "„Ö§üì≤Menu„Ö§"

        self.subscription_price = {"buy_month": 1990, "buy_3monthes": 5390, "buy_6monthes": 9590, "buy_12monthes": 16990, "buy_nolimit": 69990} #1990 5390 9590 16990 69990

        self.bot = TeleBot(token)

        self.prepare()

        self.bot.infinity_polling(timeout=500)
        




    def prepare(self):
        #Create menu markup
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
        markup.add(types.KeyboardButton(self.main_button))
        self.markup = markup

        # #Add developers
        # for id in self.developers_id:
        #     if not db_controller.check_the_existing_of_user(chat_id=id):
        #         self.users[id] = User(bot=self.bot, username='', id=id)
        #         self.users_promocode[self.users[id].user_referral_code] = id
        #         self.users[id].apply_payment(type_="buy_nolimit")
                

        #Check the subscription each hour
        check_sub_thread = threading.Thread(target=self.check_subscripion)
        check_sub_thread.daemon = True
        check_sub_thread.start()

    # --- Telegram Commands ---------------------------------------
        @self.bot.message_handler(commands=["start"])
        def start_message(message):

            if message.chat.id not in self.users:
                self.users[message.chat.id] = User(bot=self.bot, username=message.from_user.username, id=message.chat.id)
                self.users_promocode[self.users[message.chat.id].user_referral_code] = message.chat.id
            
            self.bot.send_message(message.chat.id, """‚ö°Ô∏è CryptoTrend Notification Bot ‚Äî  —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç-—à–ø–∏–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤–º–µ—Å—Ç–æ –≤–∞—Å —Å–ª–µ–¥–∏—Ç –∑–∞ —Ä—ã–Ω–∫–æ–º –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –Ω–∞ –±–∏—Ä–∂–µ.

–° –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:

üìà –ü–æ–ª—É—á–∞—Ç—å –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ—Ä—ã–≤–∞ —Ç—Ä–µ–Ω–¥–∞ –î–æ–Ω—á–∏–∞–Ω–∞. –ú–∞–∫—Å–∏–º—É–º–∞ –∏ –º–∏–Ω–∏–º—É–º–∞ –∑–∞ 60 –¥–Ω–µ–π
üéØ –†–∞–±–æ—Ç–∞—Ç—å —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ –±–∏—Ä–∂ Bybit –∏ MEXC
‚öôÔ∏è –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...

–û–±—Ä–∞—Ç–∏—Ç–µ —Ç–∞–∫–∂–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É. –ì–¥–µ –ø–æ –∫–æ–¥—É, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞ –≤—ã–±–æ—Ä:

‚úÖ –°–∫–∏–¥–∫—É –≤ 10% –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –æ–ø–ª–∞—Ç—É –±–æ—Ç–∞
‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π 7 –¥–Ω–µ–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥

–ê –µ—Å–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∫–æ–¥—É –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, —Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –≤ 10% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏—Ö –ø–æ–¥–ø–∏—Å–∫–∏üî•""", reply_markup=self.markup)
            
        
            

        @self.bot.message_handler(commands=["referral"])
        def referral(message):

            if not self.users[message.chat.id].inviter_referral_code_activated:
                referral_text = "\n\n–ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
            
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton(
                text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥",
                callback_data="activate_promocode",
            )
            markup.add(button1)
            self.bot.send_message(message.chat.id, f"–í–∞—à –∫–æ–¥: `{self.users[message.chat.id].user_referral_code}`\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –∫–æ–¥–æ–º! –¢–æ–≥–¥–∞ —Ç–æ—Ç, –∫—Ç–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª—É—á–∏—Ç:\n - –ù–∞ –≤—ã–±–æ—Ä: 10% –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∫—É–ø–∫—É –ò–õ–ò 7 –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.\n–í—ã –∂–µ –ø–æ–ª—É—á–∏—Ç–µ 10% —Å–∫–∏–¥–∫–∏ –æ—Ç —Å—É–º–º—ã —Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –≤–∞—à–∏–º –∫–æ–¥–æ–º!{referral_text}", parse_mode="Markdown", reply_markup=markup)


        def tariffes(message):
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton(
                text="1 –º–µ—Å—è—Ü - 1 990 —Ä—É–±–ª–µ–π",
                callback_data="buy_month",
            )
            markup.add(button1)
            button1 = types.InlineKeyboardButton(
                text="3 –º–µ—Å—è—Ü–∞ - 5 390 —Ä—É–±–ª–µ–π (–≤—ã–≥–æ–¥–∞ 10%)",
                callback_data="buy_3monthes",
            )
            markup.add(button1)
            button1 = types.InlineKeyboardButton(
                text="6 –º–µ—Å—è—Ü–µ–≤ - 9 590 —Ä—É–±–ª–µ–π (–≤—ã–≥–æ–¥–∞ 20%)",
                callback_data="buy_6monthes",
            )
            markup.add(button1)
            button1 = types.InlineKeyboardButton(
                text="12 –º–µ—Å—è—Ü–µ–≤ - 16 990 —Ä—É–±–ª–µ–π (–≤—ã–≥–æ–¥–∞ 30%)",
                callback_data="buy_12monthes",
            )
            markup.add(button1)
            button1 = types.InlineKeyboardButton(
                text="–ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - 69 990 —Ä—É–±–ª–µ–π (–≤—ã–≥–æ–¥–∞ - –±–µ—Å—Ü–µ–Ω–Ω–æ)",
                callback_data="buy_nolimit",
            )
            markup.add(button1)

            self.bot.send_message(message.chat.id, """–¢–∞—Ä–∏—Ñ "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ" - –Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–ª–∞–Ω—ã""", reply_markup=markup)


        def buy_subscription(type_, message):

            cost = self.subscription_price[type_]
# -------------------DISCOUNT-------------------------
            #%
            cost = round(cost*(1-self.users[message.chat.id].discount_percent), 0)
            print(cost)
            #rub
            cost = cost - self.users[message.chat.id].discount_rub

            if cost<2:
                self.users[message.chat.id].apply_payment(type_=type_)
                return

            form = self.create_form(cost=cost)

            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton(
                text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
                url=form.redirected_url,
            )
            markup.add(button1)


            self.bot.send_message(message.chat.id, f"–ö –æ–ø–ª–∞—Ç–µ {cost} —Ä—É–±–ª–µ–π.\n\n–û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.", reply_markup=markup)
            
            payment_thread = threading.Thread(target=self.accept_payment, args=[form.label, message.chat.id, type_, self.subscription_price[type_]])
            payment_thread.daemon = True
            payment_thread.start()

        #Referral
        def activate_promocode_reply_handler(inner_message):
            if inner_message.text in self.users_promocode and inner_message.text!=self.users[inner_message.chat.id].user_referral_code:
                self.users[inner_message.chat.id].inviter_referral_code_activated = self.users_promocode[inner_message.text]
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton(
                    text="7 –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏",
                    callback_data="promocode_7days",
                )
                markup.add(button1)
                button1 = types.InlineKeyboardButton(
                    text="10% —Å–∫–∏–¥–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∫—É–ø–∫—É",
                    callback_data="promocode_percent",
                )
                markup.add(button1)
                self.bot.send_message(inner_message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–µ–±–µ –ø—Ä–∏–≤–µ–ª–µ–≥–∏—é:", reply_markup=markup)
            elif inner_message.text == self.origin_referral_code:
                self.users[inner_message.chat.id].inviter_referral_code_activated = True
                self.bot.send_message(inner_message.chat.id, "–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                self.users[inner_message.chat.id].apply_payment(type_="buy_7days")
            else:
                self.bot.send_message(inner_message.chat.id, "...–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥...")
        def activate_promocode(message):
            bot_reply = self.bot.reply_to(message, "–ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥")
            self.reply_blacklist.append(bot_reply.message_id)
            self.bot.register_for_reply(bot_reply, activate_promocode_reply_handler)
        def apply_percent_promocode(message):
            if self.users[message.chat.id].referral_code_activated == False:
                self.users[message.chat.id].referral_code_activated = True
                self.users[message.chat.id].discount_percent = 0.1
                self.bot.send_message(message.chat.id, "–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å 10% —Å–∫–∏–¥–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∫—É–ø–∫—É.")
        def apply_7_days_sub_promocode(message):
            if self.users[message.chat.id].referral_code_activated == False:
                self.users[message.chat.id].referral_code_activated = True
                self.bot.send_message(message.chat.id, "–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                self.users[message.chat.id].apply_payment(type_="buy_7days")
        
        def notify_filter(message):

            if not self.users[message.chat.id].subscription:
                self.bot.send_message(message.chat.id, text="–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–∞–º –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
                return 
            
            customization_markup = types.InlineKeyboardMarkup()

            # --- Buttons ---
            smile = "‚úÖ"
            if "common" not in self.users[message.chat.id].tickers_stream_spot:
                smile = "‚ùå"
            button = types.InlineKeyboardButton(
                text="{smile} –°–ø–æ—Ç—ã –≤–æ –≤—Å–µ—Ö –±–∏—Ä–∂–∞—Ö".format(smile=smile),
                callback_data="switch_to-spot-common",
            )
            customization_markup.add(button)
            smile = "‚úÖ"
            # if "MEXC" not in self.users[message.chat.id].tickers_stream_spot:
            #     smile = "‚ùå"
            # button = types.InlineKeyboardButton(
            #     text="{smile} –°–ø–æ—Ç—ã –≤ MEXC".format(smile=smile),
            #     callback_data="switch_to-spot-MEXC",
            # )
            # customization_markup.add(button)
            # smile = "‚úÖ"
            # if "ByBit" not in self.users[message.chat.id].tickers_stream_spot:
            #     smile = "‚ùå"
            # button = types.InlineKeyboardButton(
            #     text="{smile} –°–ø–æ—Ç—ã –≤ ByBit".format(smile=smile),
            #     callback_data="switch_to-spot-ByBit",
            # )
            # customization_markup.add(button)
            
            smile = "‚úÖ"
            if "common" not in self.users[message.chat.id].tickers_stream_future:
                smile = "‚ùå"
            button = types.InlineKeyboardButton(
                text="{smile} –î–µ—Ä–∏–≤–∞—Ç–∏–≤—ã –≤–æ –≤—Å–µ—Ö –±–∏—Ä–∂–∞—Ö".format(smile=smile),
                callback_data="switch_to-future-common",
            )
            customization_markup.add(button)
            smile = "‚úÖ"
            if "MEXC" not in self.users[message.chat.id].tickers_stream_future:
                smile = "‚ùå"
            button = types.InlineKeyboardButton(
                text="{smile} –î–µ—Ä–∏–≤–∞—Ç–∏–≤—ã –≤ MEXC".format(smile=smile),
                callback_data="switch_to-future-MEXC",
            )
            customization_markup.add(button)
            smile = "‚úÖ"
            if "ByBit" not in self.users[message.chat.id].tickers_stream_future:
                smile = "‚ùå"
            button = types.InlineKeyboardButton(
                text="{smile} –î–µ—Ä–∏–≤–∞—Ç–∏–≤—ã –≤ Bybit".format(smile=smile),
                callback_data="switch_to-future-ByBit",
            )
            customization_markup.add(button)

            try:
                self.bot.edit_message_text(
                    "–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                    message.chat.id,
                    message.message_id,
                    reply_markup=customization_markup,
                    parse_mode="HTML",
                )
            except:
                ''
        def switch_to(message ,type_, exchange):
            
            if type_=="future":
                if exchange not in self.users[message.chat.id].tickers_stream_future:
                    self.users[message.chat.id].tickers_stream_future.append(exchange)
                else:
                    self.users[message.chat.id].tickers_stream_future.remove(exchange)
            elif type_=="spot":
                if exchange not in self.users[message.chat.id].tickers_stream_spot:
                    self.users[message.chat.id].tickers_stream_spot.append(exchange)
                else:
                    self.users[message.chat.id].tickers_stream_spot.remove(exchange)

            notify_filter(message)

        

        def dev_get_donchian_values(message):
            text = ""
            for ticker in self.donchian:
                text+=f"{ticker}  -->  {self.donchian[ticker]}\n"
            self.bot.send_message(chat_id=message.chat.id, text=text) 
        def dev_create_promocode_reply_handler(inner_message):
            self.origin_referral_code = inner_message.text
            self.bot.send_message(chat_id=inner_message.chat.id, text=f"–ù–æ–≤—ã–π –ù—É–ª–µ–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: {self.origin_referral_code}") 
        def dev_create_promocode(message):
            bot_reply = self.bot.reply_to(message, "–ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥")
            self.reply_blacklist.append(bot_reply.message_id)
            self.bot.register_for_reply(bot_reply, dev_create_promocode_reply_handler)
        def dev_send_newletter(message):
            ids = self.users[message.chat.id].dev_get_all_ids()
            for id_ in ids:
                try:
                    self.bot.send_message(id_, message.text)
                except:
                    ''
        def dev_activate_newletter(message):
            bot_reply = self.bot.reply_to(message, "–ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            self.reply_blacklist.append(bot_reply.message_id)
            self.bot.register_for_reply(bot_reply, dev_send_newletter)
        

            
            


        @self.bot.callback_query_handler(func=lambda call: True)
        def keyboard_buttons_handler(call):

            if call.message.chat.id not in self.users:
                self.users[call.message.chat.id] = User(bot=self.bot, username=call.message.from_user.username, id=call.message.chat.id)
                self.users_promocode[self.users[call.message.chat.id].user_referral_code] = call.message.chat.id

            call_data = call.data

            if call_data=="about":
                start_message(message=call.message) 
            elif call_data=="referral":
                referral(message=call.message) 

            elif call_data=="notity_filter":
                notify_filter(message=call.message)
            elif call_data.split("-")[0] == "switch_to":
                switch_to(message=call.message, type_=call_data.split("-")[1], exchange=call_data.split("-")[2])

            elif call_data=="buy_subscription":
                tariffes(message=call.message)

            elif call_data=="buy_month" or call_data=="buy_3monthes" or call_data=="buy_6monthes" or call_data=="buy_12monthes" or call_data=="buy_nolimit":
                buy_subscription(type_=call_data, message=call.message)

            elif call_data=="activate_promocode":
                activate_promocode(message=call.message)
            elif call_data=="promocode_7days":
                apply_7_days_sub_promocode(message=call.message)
            elif call_data=="promocode_percent":
                apply_percent_promocode(message=call.message)

            elif call_data=="dev_get_donchian_values":
                dev_get_donchian_values(message=call.message)
            elif call_data=="dev_create_promocode":
                dev_create_promocode(message=call.message)
            elif call_data=="dev_show_promocode":
                self.bot.send_message(chat_id=call.message.chat.id, text=f"–ù—É–ª–µ–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: {self.origin_referral_code}")
            elif call_data=="dev_newletter":
                dev_activate_newletter(message=call.message)

        @self.bot.message_handler(commands=["dev_tools"])
        def dev_tools(message):

            if message.chat.id not in self.developers_id:
                self.bot.send_message(message.chat.id, "...–Ω–µ—Ç –ø—Ä–∞–≤...")
                return
                
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton(
                text="–ü–æ–ª—É—á–∏—Ç—å –Ω—É–ª–µ–≤–æ–π –∫–æ–¥",
                callback_data="dev_show_promocode",
            )
            markup.add(button1)
            button1 = types.InlineKeyboardButton(
                text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –Ω—É–ª–µ–≤–æ–π –∫–æ–¥",
                callback_data="dev_create_promocode",
            )
            markup.add(button1)
            button1 = types.InlineKeyboardButton(
                text="–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                callback_data="dev_newletter",
            )
            markup.add(button1)
            
            self.bot.send_message(message.chat.id, "–ó–¥–µ—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", reply_markup=markup)

        def menu(message):
            markup = types.InlineKeyboardMarkup()

            #subscription
            if self.users[message.chat.id].subscription == True and self.users[message.chat.id].limit==True:
                sub_text = f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞"
                button1 = types.InlineKeyboardButton(
                    text="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø–æ–∫—É–ø–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏",
                    callback_data="buy_subscription",
                )
                markup.add(button1)
            elif self.users[message.chat.id].subscription == True:
                sub_text = f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞. –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {self.users[message.chat.id].date_of_end}"
                button1 = types.InlineKeyboardButton(
                    text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data="buy_subscription",
                )
                markup.add(button1)
            else:
                button1 = types.InlineKeyboardButton(
                    text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data="buy_subscription",
                )
                markup.add(button1)
                sub_text = f"–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–µ—Ç. –ö—É–ø–∏—Ç—å –µ—ë –º–æ–∂–Ω–æ –Ω–∏–∂–µ!"


            #referral
            referral_text = ''
            if not self.users[message.chat.id].inviter_referral_code_activated:
                referral_text = "\n\n–í—ã –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥! –î–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–∞"
            button1 = types.InlineKeyboardButton(
                text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
                callback_data="referral",
            )
            markup.add(button1)

            button1 = types.InlineKeyboardButton(
                text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                callback_data="notity_filter",
            )
            markup.add(button1)

            button1 = types.InlineKeyboardButton(
                text="–û –ë–æ—Ç–µ",
                callback_data="about",
            )
            markup.add(button1)

            self.bot.send_message(message.chat.id, text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é!\n\n{sub_text}{referral_text}", reply_markup=markup)

        
        @self.bot.message_handler(func=lambda message: True)
        def echo_all(message):

            if message.chat.id not in self.users:
                self.users[message.chat.id] = User(bot=self.bot, username=message.from_user.username, id=message.chat.id)
                self.users_promocode[self.users[message.chat.id].user_referral_code] = message.chat.id

            if message.reply_to_message != None:
                if message.reply_to_message.message_id in self.reply_blacklist:
                    return

            if message.text == self.main_button:
                menu(message=message)
                return


            self.bot.reply_to(message, "–Ø —Ä–∞–±–æ—Ç–∞—é, –∫–∞–∫ —É–≤–∏–∂—É –ø—Ä–æ—Ä—ã–≤, —Å–æ–æ–±—â—É)", reply_markup=self.markup)

    def check_subscripion(self):

        while True:
            for user in self.users:

                if self.users[user].date_of_end!='': 
                    if datetime.now()>datetime.strptime(self.users[user].date_of_end, "%Y-%m-%d %H:%M:%S"):
                        self.users[user].stop_subscription()

                    #REMINDERS

            sleep(3600)
